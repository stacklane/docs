

{{% partial /_layout }}

{{<layout}}
{{$content}}

<article>
    <header>
        <h1>Scripting Engine</h1>

        <p>
            Learn about our server-side JavaScript engine.
        </p>
    </header>

    <section>
        <p>
            Stacklane uses a JavaScript <b>subset</b> for server-side logic.
            This subset is designed for speed, security, and compile time validation.
            The primary uses are <a href="/routing/js">endpoints</a> and <a href="/routing/js">suppliers</a>.
        </p>
        <p>
            The JS engine implies <code>"use strict"</code> by default, however
            its strictness goes beyond this standard setting.
            In general Stacklane will not a let a script successfully compile
            unless it can validate all properties and methods referenced actually exist.
            This is particularly helpful when it comes to referencing <a href="/data/">data models</a>.
        </p>
    </section>

    <section>
        <h2>Restrictions</h2>
        <p>
            The following is <b>not</b> an exhaustive list, but covers the more common cases:
        </p>
        <p>
        <ul>
            <li>
                Compact function syntax only -- instead of <code>function (..) {..}</code>,
                use the equivalent compact syntax <code>(..)=>{..}</code>
            </li>
            <li>
                <code>Date</code> objects are immutable -- any of the <code>Date.setXyz</code> methods
                are not available.
            </li>
            <li>
                <code>const</code> is not supported.
            </li>
            <li>
                Free-form iteration via <code>for</code> <code>while</code> is not allowed --
                instead in cases that need iteration-like functionality, we provide
                callbacks such as <code>...forEach((e)=>{...})</code>
            </li>
            <li>
                Once assigned, variables may not change their type -- this works
                <code>let x = null; x = '1'</code> (null to string), but this does not
                <code>let x = 1; x = '1'</code> (number to string).
            </li>
        </ul>
        </p>
    </section>

</article>

{{/content}}
{{/layout}}

