
{{% partial /_layout.mustache }}

{{<layout}}
{{$content}}

<article>
    <header>
        <h1>JavaScript Endpoints</h1>

        <p>
           Learn how to use JavaScript to create custom logic for your views and endpoints.
        </p>
    </header>

    <section>
        <p>
            Stacklane uses a JavaScript <b>subset</b> for server-side logic.
            This subset is designed for speed, security, and compile time validation.
        </p>

        <p>
            JavaScript endpoints live at files named after HTTP verbs (uppercase required):
            <code>GET.js</code>, <code>POST.js</code>, <code>PUT.js</code>, <code>DELETE.js</code>.
        </p>

        <p>
            In many cases JavaScript endpoints are used in conjunction with JavaScript
            <a href="/routing/suppliers">Suppliers</a>.
            Suppliers allow for code reuse between multiple endpoints, allowing for simpler
            endpoint code.
        </a>
        </p>
    </section>

    <section>
        <h2>Routing</h2>

        <p>
            Script endpoints are named according to their <b>parent path</b>.
            This results in endpoints with no trailing slashes.
        </p>
        <p>
            For example, <code>/hello/GET.js</code> and <code>/hello/POST.js</code>
            respond to requests for <code>GET /hello</code> and <code>POST /hello</code>.
        </p>
        <p>
            For a dynamic path such as <code>/product/{product}/GET.js</code>, a
            corresponding request might be <code>/product/1234</code>.
        </p>
    </section>

    <section>
        <h2><a name="output">Output</a></h2>

        <p>
            Scripts are executed on the server-side only, and their last emitted value
            becomes the response value. Scripts do not produce HTML, which is better suited
            for <a href="/routing/mustache">Mustache</a> files.
            The following types of output are supported:
        </p>

        <h3>Redirects</h3>
        <p>
            <ul>
                <li>
                    Internal redirects -
                    Output a string prefixed with "/"
                    to perform an absolute redirect to another endpoint within your app.
                </li>
                <li>
                    External redirects -
                    Output a string prefixed with "http" to perform an external redirect.
                </li>
            </ul>
        </p>

        <h3>Rerouting</h3>
        <p>
            Similar to an internal redirect, but no extra client request is made.
            A few conditions must exist for this to occur.

            <ul>
                <li>It must be an POST/PUT/DELETE request.</li>
                <li>"X-Requested-With" header must exist and equal "XMLHttpRequest" (denoting an AJAX request).</li>
                <li>The script must emit an absolute path for the app, similar to an regular internal redirect.</li>
            </ul>

            Given a <code>POST.js</code>code called via AJAX and returning '/show/all', the server would
            internally route and return the result of executing <code>GET /show/all</code>, <b>instead of</b>
            requiring the client to round trip as it would with a normal internal redirect.
        </p>

        <h3>JSON</h3>
        <p>
            Output an object literal from the script to create a JSON response.  For example:

            <pre><code class="language-javascript">
({
  hello: 'world'
})
            </code></pre>

            Result:

            <pre><code class="language-javascript">
{
  "hello": "world"
}
            </code></pre>

            Stream aware model methods may also be used:

            <pre><code class="language-javascript">
/* Code to assign LoadedList variable */

({
  list: LoadedList.name,
  tasks: LoadedList(()=>Task.all().map(t=>({name:t.title}}))
})
            </code></pre>

            Result:

            <pre><code class="language-javascript">
{
  "list": "hello"
  "tasks": [{"name":"world"}]
}
            </code></pre>
        </p>

    </section>


</article>

{{/content}}
{{/layout}}
