
{{% partial /_layout }}

{{<layout}}
{{$content}}

<article>
    <header>
        <h1>Stream Methods</h1>

        <p>
            Learn about available streaming methods for use on collections and queries.
        </p>
    </header>

    <section>
        Stacklane provides chainable, streaming methods on collection-like results.
        This includes <a href="/models/queries">queries</a> and <a href="/models/fields#embedded">embedded</a> values.
        Use streaming methods to filter, transform, and count collection results.
    </section>

    <section>
        <h2>Setup</h2>

        <p>
            Instruction related methods "setup" the stream.  All are optional, and may be used in combination (chained).
        </p>

        <h3>map(function)</h3>
        <p>
            The callback function to <code>map</code> <i>transforms</i> the current stream element
            to something else.  This is often used to transform a model to a JSON object literal.
        </p>
        <p>
        <pre><code class="language-javascript">
let titlesOnly = Article.all().map(article=>({title:article.title}));
        </code></pre>
        </p>

        <h3>limit(number)</h3>
        <p>
            Limits the number of results to a following instruction or completion method.
        </p>

        <h3>filter(function)</h3>
        <p>
            The callback function to <code>filter</code> returns a <code>boolean</code>
            that indicates whether the
            item should be included in the stream.
            Keep in mind however that most filtering is better suited in the
            <a href="/models/queries">query definition</a>.
        </p>

    </section>

    <section>
        <h2>Completion</h2>

        <p>
            These methods process or iterate the previously setup stream.
            However note that often processing a stream takes place outside of
            a script -- for example, when a script returns something <a href="/endpoints/js#json">JSON-like</a>
            which includes a previously setup stream, it is the system that will
            complete / process the stream outside of the script.
            Another example is a Mustache file which iterates over a stream.
        </p>

        <!--
        What is the use case for forEach -- seems if you are iterating, you usually
        want mutability of modify.

        The system uses forEach internally, for output in Mustache, or results from a scripting,
        but what use is forEach within a scripting?

        <h3>forEach(function)</h3>
        <p>
            The callback function is called once per object in the stream.
        </p>
        -->

        <!-- use case?
        <h3>count</h3>
        <p>
            Returns a number with the number of elements.
        </p>
        -->

        <h3>modify(function)</h3>
        <p>
            Special case of <code>forEach</code> which allows for modification of data.
            This might be calling a setter, or calling <code>remove()</code> on a model.
        </p>
    </section>


</article>


{{/content}}
{{/layout}}
