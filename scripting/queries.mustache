
{{% partial /_layout }}

{{<layout}}
{{$content}}

<article>
    <header>
        <h1>Query Scripting</h1>

        <p>
            Learn about scripting with <a href="/models/queries">queries</a>.
        </p>
    </header>

    <section>
        <h2>Pre-Defined Queries</h2>

        <p>
            <a href="/models/queries">Queries</a> are always <a href="/models/definition#queries">pre-defined</a>.
            They have a name unique to a model type,
            and parameters that must be set before the query can be executed.
            These are then exposed to scripting as regular method calls.
            The result of a query is always a <a href="/scripting/stream">stream</a>.
        </p>
        <p>
        <pre><code class="language-javascript">
// Simple query (previously defined) which finds Note's starting with X.
// The query was defined with the name "byTitle",
// and "titlePrefix" is a named parameter of the query.
let thePrefix = 'ABC';
let notesByTitle = Note.byTitle().titlePrefix(thePrefix);
        </code></pre>
        </p>
        <p>
            Additionally there is the built-in query named <code>all()</code>,
            e.g. <code>Note.all()</code>.
            <code>all()</code> supports the options,
            <code>asc()</code> (default), or <code>desc()</code>, which provide
            ordering by creation timestamp.
            As with any query the result is a <a href="/scripting/stream">stream</a>.
        </p>
    </section>


    <section>
        <h2>Unique Value Queries</h2>

        <p>
            Query <a href="/models/fields#unique">Unique</a> fields and <a href="/models/fields#uid">UID</a>
            fields as you would any other type of equality query.
            Assuming a model named <i>Article</i> and a UID field named "slug":
        </p>
        <p>
        <pre><code class="language-javascript">
// Where $slugId is from a URL path parameter:
let found = Article.slug($slugId).get();
// Because of error handling, 'found' is always defined at this point
        </code></pre>
        </p>
    </section>

    <section>
        <div class="alert alert-secondary" role="alert">
            Next: Learn about <a href="/scripting/stream">scripting with streams</a>.
        </div>
    </section>
</article>

{{/content}}
{{/layout}}
