{{% partial /_layout }}

{{<layout}}
{{$content}}

<article>
    <header>
        <h1>Containers</h1>

        <p>
            Learn about designing data models with containers.
        </p>
    </header>

    <section>
        <h2>Overview</h2>

        <p>
            Use containers whenever there is a strong one-to-many, or parent/child relationship.
            Containers are a kind of <a href="/data/types#universal">Universal</a> model type,
            and inherit all capabilities of that type.
        </p>
        <p>
            A container may have many kinds of children, but a child may only have one kind of container/parent.
            For example, "Account/X" and "Account/Y", but there would never be another parent for "X" besides "Account".
        </p>
        <p>
            Containers may be deeply nested, such as Account ▶ Site ▶ Order, or User ▶ List ▶ Task.
        </p>
    </section>

    <section>
        <h2>Multi-Tenant Containers</h2>

        <p>
            The topmost container may be declared as a "Tenant" container.  Use for scenarios
            where there is a clear case to silo or strongly isolate all of the descendant data models.
            "User", "Account", "Project", etc.  Any top-level container whose data is highly specific to it.
        </p>

        <h3>Query Considerations</h3>
        <p>
            A Tenant container starts a new "query isolation" scope.
            Given the example hierarchy User ▶︎ List ▶︎ Task, and a query for "Tasks by Name" defined
            on Task, the scope of Tasks that will be queried varies depending on which of the two possible
            ancestor containers are selected.
        </p>
        <p>
            If the "Tasks by Name" query is executed in the scope of the User, then all Tasks across
            all Lists by that single User will be queried by name.
        </p>
        <p>
            If the "Tasks by Name" query is executed in the scope of a List, then only Tasks within
            the single List will be queried by name.
        </p>
        <p>
            Because query isolation is in effect starting at a single User,
            it is not possible to search for all Tasks's across all User's.
        </p>
    </section>

    <section>
        <h2>Event Container and Query Scope</h2>

        <p>
            The <a href="/data/types#event">Event</a> type is always isolated to its direct parent for query scope.
            Given Account ▶︎ Site ▶︎ Orders, the Orders Event type must always be queried in the context of a single Site.
        </p>
    </section>

    <section>
        <h2>Behavior of Unique Values</h2>

        <p>
            If a model type within a container defines unique values, then those
            unique values are local/specific to a given container.
        </p>

        <p>
            For example, given Blog ▶ Post, where Post has a <a href="/data/fields#uid">UID</a> field named "slug".
            If there are many Blog's, and many Posts within any given Blog, then the two Posts may have
            same UID if they are in <b>separate</b> Blog's.
        </p>
    </section>
</article>


{{/content}}
{{/layout}}