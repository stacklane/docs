
{{% partial /_layout }}

{{<layout}}

{{$title}}Model Definition{{/title}}

{{$content}}

<article>
    <header>
        <h1>Model Definition</h1>

        <p>
            Learn about defining model and field types.
        </p>
    </header>

    <section>
        <p>
            To define and use data models in your project, create a directory named "📦" in the root
            of your project.  This directory will contain <code>.yaml</code> files that
            define the model names and fields, as well as the structure of
            parent/child (<a href="/models/#containers">container</a>) relationships.
        </p>
    </section>

    <section>
        <h2><a name="name">Model Name and Type</a></h2>
        <p>
            The file name indicates <i>both</i> the name of the model as well as the model's <a href="/models/types">type</a>
            The model's type is denoted with a specific emoji prefix.
        </p>
        <p>
            <ul>
                <li>Universal -- prefix file with 🌐</li>
                <li>Multi-Tenant Container -- prefix file with 🏢</li>
                <li>Global Embedded -- prefix with 📎</li>
            </ul>
        </p>
        <p>
            Within the directory "📦", and given a file name named <code>🌐Article.yaml</code>,
            a "Universal" model named <code>Article</code> will be available to your scripts.
        </p>
    </section>

    <section>
        <h2><a name="containers">Containers</a></h2>
        <p>
            To define models that are in a container, place them into directories.  Example files and folders in the
            "📦" directory which define 3 model types, two of which are in containers.
        </p>
        <p>
        <pre><code>
🏢Account.yaml
Account/🌐List.yaml
Account/List/🌐Task.yaml
        </code></pre>
        </p>
    </section>

    <section>
        <h2><a name="fields">Defining Fields</a></h2>

        <p>
            Field names must follow "camel case" conventions, e.g. "camel" or "camelCase".
            All defined fields are indexed and required by default.
            Field definitions have a short form and long form, which can be mixed and matched as
            needed in the same file.
            <i>Note: .yaml files use spaces, not tabs, for indentation.</i>
        </p>

        <h3>Short Form</h3>
        <p>
            To compactly use all defaults for a field, simply assign a <a href="/models/fields">field type</a>
            immediately following your field name.
        </p>
        <p>
        <pre class="language-yaml"><code>
fieldName: string
otherField: boolean
somethingEmbed: EmbeddedModelName
    </code></pre>
        </p>

        <h3>Long Form</h3>
        <p>
            To define additional field properties, used the long form.
            Note that in the long form you only need to define the properties you're interested in.
        </p>
        <p>
        <pre class="language-yaml"><code>
fieldName:
  type: string
  optional: true
  unique: true

otherField:
  type: boolean
    </code></pre>
        </p>
    </section>

    <section>
        <h2><a name="embedded">Embedded Values</a></h2>

        <h3>Global</h3>
        <p>
            Global embedded model types have a distinct name and configuration file,
            and may be referenced in a configuration file like any other field type.
        </p>

        <h3>Local</h3>
        <p>
            Local embedded model types are defined directly in the model that uses them.
        </p>
        <p>
        <pre class="language-yaml"><code>
item:
  type:
    price: double
    </code></pre>
        </p>

        <h3>Multi-Valued</h3>
        <p>
            Whether defined globally or locally, embedded values can allow multiple values (up to 20 entries),
            by using "[]" after the field name:
        </p>
        <p>
        <p>
        <pre class="language-yaml"><code>
items[]:
  type:
    price: double
    </code></pre>
        </p>
        <p>
            If requirements don't call for the maximum of 20 entries, then provision less entries by
            specifying a number (less than 20) between the brackets.
        </p>
        <p>
        <pre class="language-yaml"><code>
address[5]: Address
    </code></pre>
        </p>
    </section>
</article>


{{/content}}
{{/layout}}
