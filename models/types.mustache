
{{% partial /_layout }}

{{<layout}}

{{$title}}Model Types{{/title}}

{{$content}}

<article>
    <header>
        <h1>Model Types</h1>

        <p>
           Learn about model types, and how to choose the best for the job.
        </p>
    </header>

    <section>
        <h2><a name="universal">Universal</a></h2>

        <p>
            This is a general purpose type, suitable for a wide range of entities and concepts.
            It supports unique values, and may be a singleton.
        </p>

        <p>
            The Universal type may optionally be a container for other types.
            For example, a <i>List</i> might be defined as a container.
            for <i>Task</i>'s.
        </p>

        <p>
            This type is not for cases covered by other model types.  It should not be
            used for extremely unbounded data, such as <i>Orders</i> or <i>Comments</i>
            (better suited for the Event type).  It does not allow large text fields,
            and is therefore not suitable for an article, blog post, or product description.
        </p>
    </section>

    <section>
        <h2><a name="tenant">Tenant</a></h2>

        <p>
            Use for top level containers where there is a clear case to silo or
            strongly isolate all of the descendant data models.
            "User", "Account", "Project", etc -- any top level container whose data is highly specific to it.
            Despite its name the Tenant type is also good for used for standalone, top-level profiles or mappings.
        </p>

        <p>
            Keep in mind that due to their narrow purpose, Tenant's are highly limited compared to other types.
            You may only create or update <b>1</b> Tenant in a single request.
            They can only be retrieved by a field defined as unique, or their ID.
        </p>

        <h3>Query Considerations</h3>
        <p>
            A Tenant container starts a new "query isolation" scope.
            Given the example hierarchy User ▶︎ List ▶︎ Task, and a query for <code>Task.name('something')</code>,
            the scope of Tasks that will be queried varies depending on which of the two possible
            ancestor containers are selected.
        </p>
        <p>
            If the <code>Task.name('something')</code> query is executed in the scope of the User, then all Tasks across
            all Lists by that single User will be queried by name.
        </p>
        <p>
            If the <code>Task.name('something')</code> query is executed in the scope of a List, then only Tasks within
            the single List will be queried by name.
        </p>
        <p>
            Because query isolation is in effect starting at a single User,
            it is not possible to search for all Tasks's across all User's.
        </p>
    </section>

    <section>
        <h2><a name="event">Event</a></h2>

        <p>
            This type is for events, time-series data, activity, or logging.
            Events accumulate (in a healthy business), as time goes by, at a potentially high frequency.
            Events are not "crafted" or "authored" -- they "occur".
        </p>
        <p>
            Orders, comments, and twitter posts are considered "events", from the standpoint of their
            potentially high frequency, their small size, and their permanence/low-mutability.
            Once created they are usually not modified again.
        </p>
        <p>
            Another distinguishing characteristic is that newer Events are generally more relevant than older events,
            with very old Events having little to no relevance.
        </p>
        <p>
            Events have a "useful time horizon" for queries, of either yearly, monthly, or daily.
            The default of one year should be suitable for most cases, and is easiest to develop against.
            A query for events may only span two time partitions.  So in the case of the default
            yearly horizon, a single query could span two years.
        </p>

        <h3>Query Scope</h3>
        <p>
            The Event type is always isolated to its immediate parent container for query scope.
            Given Account ▶︎ Site ▶︎ Orders, the Orders Event type must always be queried in the context of a single Site.
            In other words, you must first know the Site you want to query before you query for Orders.
        </p>

        <h3>Advantages</h3>
        <p>
            <ul>
                <li>
                    Automatic partitioning over time. There is no "performance penalty" to a business that has
                    events growing over time, where newer events are generally more relevant than previous events.
                </li>
            </ul>
        </p>

        <h3>Limitations</h3>
        <p>
            <ul>
                <li>Unique values are not allowed.</li>
                <li>Must always exist within a tenant or container.</li>
                <li>All queries must include date/time range (it is not possible to query for all Events).</li>
                <li><a href="#embedded">Embedded</a> models must be "local" to the Event type --
                    thereby enforcing they are "purpose built" for that Event type.</li>
            </ul>
        </p>
    </section>

    <section>
        <h2><a name="content">Content</a></h2>
        <p>
            Roadmap.
        </p>
    </section>

    <section>
        <h2><a name="embedded">Embedded</a></h2>

        <p>
            Embedded models create a complex value (or sub-document) that can be used as a field type for another model type.
            It may also be used for lists, where for example "Order.items" is a list of "OrderItem" embedded values.
            Models to be embedded take on the field limitations of whatever type they are embedded on.
        </p>

        <h3>Local vs. Global</h3>
        <p>
            Global Embedded types may be used and embedded within any other type,
            as long as their fields are compatible with that type.
            They have a distinct name and configuration file.
        </p>
        <p>
            Local Embedded types may only be used and embedded within a single model type,
            and they are defined directly in the same model configuration file that uses them.
        </p>
    </section>
</article>

{{/content}}
{{/layout}}
